<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cassandra.Data.Linq</name>
    </assembly>
    <members>
        <member name="P:Cassandra.Data.Linq.Context.Keyspace">
            <summary>
            Gets name of keyspace.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Select``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A CqlQuery&lt;TSource&gt; which after execution returns a sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt; whose elements
            are the result of invoking the transform function on each element of source.
            To execute this CqlQuery use <code>Execute()</code> method.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Where``1(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             Returns a CqlQuery which after execution returns filtered sequence of values based on a predicate.
             To execute this CqlQuery use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt;
            that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Count``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlScalar which after execution returns the number of elements in a sequence.
            To execute this CqlScalar use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <returns>a CqlScalar&lt;long&gt; which after execution returns the number of elements in a sequence.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.First``1(Cassandra.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution returns the first element in a sequence that satisfies a specified condition.
            To execute this CqlQuery use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt; to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence
            that passes the test in the specified predicate function.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Cassandra.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of the sequence that satisfies a condition
            or a default value if no such element is found.
            To execute this CqlQuery use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt;  to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return <code>default(TSource)</code> if source is empty
            or if no element passes the test specified by predicate,
            otherwise the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.First``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element in a sequence.
            To execute this CqlQuery use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of a sequence,
            or a default value if the sequence contains no elements.
            To execute this CqlQuery use <code>Execute()</code> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns><code>a CqlQuery&lt;TSource&gt; which after execution will return default(TSource)</code> if source is empty,
            otherwise the first element in source.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Take``1(Cassandra.Data.Linq.CqlQuery{``0},System.Int32)">
            <summary>
            Returns a CqlQuery which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.
            To execute this CqlQuery use <code>Execute()</code> method.
            </summary>        
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.OrderBy``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in ascending manner according to a key.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.OrderByDescending``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in descending manner according to a key.</returns>
        </member>
        <member name="F:Cassandra.Data.Linq.CqlQueryTools.HexStringTable">
            <summary>
            Hex string lookup table.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryTools.ToHex(System.Byte[])">
            <summary>
            Returns a hex string representation of an array of bytes.
            http://blogs.msdn.com/b/blambert/archive/2009/02/22/blambert-codesnip-fast-byte-array-to-hex-string-conversion.aspx
            </summary>
            <param name="value">The array of bytes.</param>
            <returns>A hex string representation of the array of bytes.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.ClusteringKeyAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Sets the clustering key and optionally a clustering order for it.
            </summary>
            <param name="index"></param>
            <param name="order">Use "DESC" for descending order and "ASC" for ascending order.</param>
        </member>
    </members>
</doc>
